import asyncio
from datetime import datetime
from modbus.client import check_sensor_bit_async
from utils.storage import save_runtime_to_json, save_runtime_to_db,load_runtime_from_db

async def monitor_runtime_async(
    params: dict,
    interval: int = 60,
    total_minutes: int = 0,
    sensor_name: str = "–î–∞—Ç—á–∏–∫"
):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –¥–∞—Ç—á–∏–∫–∞ –ø–æ Modbus.

    :param params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è check_sensor_bit (host, port, –∏ —Ç.–¥.)
    :param interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    :param minutes: –í—Ä–µ–º—è –∏—Ç–µ—Ä–≤–∞–ª–∞
    :param sensor_name: –ù–∞–∑–≤–∞–Ω–∏–µ/–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–∞—Ç—á–∏–∫–∞
    """
    print(f"‚ñ∂Ô∏è [{sensor_name}] –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
    try:
        while True:
            state = await check_sensor_bit_async(**params)
            if state == 1:
                print(sensor_name,state)
                total_minutes = await load_runtime_from_db(sensor_name)
                if not total_minutes:
                    return False
                await save_runtime_to_json(sensor_name, total_minutes+1)
                await save_runtime_to_db(sensor_name, total_minutes+1)
            elif state == 0:
                print(f"[{datetime.now()}] ‚è∏ [{sensor_name}] –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
            else:
                print(f"[{datetime.now()}] ‚ùå [{sensor_name}] –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è.")
            await asyncio.sleep(interval)
    except asyncio.CancelledError:
        print(f"üõë [{sensor_name}] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return total_minutes
